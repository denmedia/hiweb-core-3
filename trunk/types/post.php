<?php

	namespace {


		if( !function_exists( 'add_field_post' ) ){
			/**
			 * @param $id
			 * @return \hiweb\fields\types\post\field
			 */
			function add_field_post( $id ){
				$new_field = new hiweb\fields\types\post\field( $id );
				hiweb\fields::register_field( $new_field );
				return $new_field;
			}
		}
	}

	namespace hiweb\fields\types\post {


		use hiweb\arrays;
		use function hiweb\css;
		use hiweb\fields\value;
		use hiweb\images;
		use function hiweb\js;


		class field extends \hiweb\fields\field{


			protected $post_type = [ 'page' ];
			protected $placeholder = '';
			protected $meta_key = '';
			protected $multiple = false;


			/**
			 * @param null $set
			 * @return $this|null|array|string
			 */
			public function post_type( $set = null ){
				return $this->set_property( __FUNCTION__, $set );
			}


			/**
			 * @param null $set
			 * @return $this|string
			 */
			public function placeholder( $set = null ){
				return $this->set_property( __FUNCTION__, $set );
			}


			/**
			 * @param null $set
			 * @return $this|null
			 */
			public function meta_key( $set = null ){
				return $this->set_property( __FUNCTION__, $set );
			}


			public function multiple( $set = true ){
				return $this->set_property( __FUNCTION__, $set );
			}


			protected function get_input_class(){
				return __NAMESPACE__ . '\\input';
			}


		}


		class input extends \hiweb\fields\input{

			public function __construct( \hiweb\fields\field $field, value $value ){
				parent::__construct( $field, $value );
				add_action( 'wp_ajax_hiweb-type-post', function(){

					add_filter( 'posts_where', function( $where, &$wp_query ){
						global $wpdb;
						if( $wpse18703_title = $_POST['search'] ){
							$where .= ' AND ' . $wpdb->posts . '.post_title LIKE \'' . esc_sql( $wpdb->esc_like( $wpse18703_title ) ) . '%\'';
						}
						return $where;
					}, 10, 2 );

					$post_types = $this->get_parent_field()->post_type();
					$wp_query = new \WP_Query( [
						'post_type' => $post_types,
						'posts_per_page' => 99,
						'post_status' => 'any',
						's' => $_POST['search'],
						'orderby' => 'title',
						'order' => 'ASC'
					] );
					$R = [];
					$post_types_names = [];
					if( is_array( $post_types ) ) foreach( $post_types as $post_type ){
						if( post_type_exists( $post_type ) ){
							$post_types_names[ $post_type ] = get_post_type_object( $post_type )->label;
						} else {
							$post_types_names[ $post_type ] = 'неизвестный тип записи';
						}
					}
					/** @var \WP_Post $wp_post */
					foreach( $wp_query->get_posts() as $wp_post ){
						$R[] = [
							'value' => $wp_post->ID,
							//'text' => '<img src="' . get_image( get_post_thumbnail_id( $wp_post ) )->get_src( 'thumbnail' ) . '">' . $wp_post->post_title,
							'name' => '<img src="' . get_image( get_post_thumbnail_id( $wp_post ) )->get_src( 'thumbnail' ) . '">' . $wp_post->post_title
						];
					}

					//wp_send_json_success( $R );
					echo json_encode( [
						'success' => true,
						'results' => $R
					] );
					die;
				} );
			}


			/**
			 * @return field
			 */
			public function get_parent_field(){
				return parent::get_parent_field(); // TODO: Change the autogenerated stub
			}


			public function html(){
				//\hiweb\css( HIWEB_DIR_VENDORS . '/fm.selectator.jquery/fm.selectator.jquery.css' );
				\hiweb\css( HIWEB_DIR_CSS . '/field-post.css' );
				//$js_id = \hiweb\js( HIWEB_DIR_VENDORS . '/fm.selectator.jquery/fm.selectator.jquery.js', [ 'jquery' ], true );
				\hiweb\js( HIWEB_DIR_JS . '/field-post.js', [ 'jquery' ], true );

				$post_types = $this->get_parent_field()->post_type();
				if( is_string( $post_types ) ) $post_types = [ $post_types ];
				$post_types_names = [];
				if( is_array( $post_types ) ) foreach( $post_types as $post_type ){
					if( post_type_exists( $post_type ) ){
						$post_types_names[ $post_type ] = get_post_type_object( $post_type )->label;
					} else {
						$post_types_names[ $post_type ] = 'неизвестный тип записи';
					}
				}

				ob_start();
				///
				$wp_query = new \WP_Query( [ 'post_type' => $post_types, 'posts_per_page' => 20, 'post_status' => 'any' ] );
				$posts_by_type = [];
				/** @var \WP_Post $post */
				foreach( $wp_query->get_posts() as $post ){
					$posts_by_type[ $post_types_names[ $post->post_type ] ][ $post->ID ] = $post;
				}
				///
				$this->attributes['data-global-id'] = $this->get_parent_field()->global_id();
				?>
				<div class="hiweb-field-post">
					<select <?= $this->get_parent_field()->multiple( null ) ? 'multiple=""' : '' ?> name="<?= $this->name() ?>[]" class="ui fluid normal dropdown search" placeholder="TETS">
						<?php
							foreach( $posts_by_type as $post_type_name => $posts ){
								if( count( $posts_by_type ) > 1 ){
									?>
									<optgroup label="<?= $post_type_name ?>">
									<?php
								}
								/** @var \WP_Post $post */
								foreach( $posts as $post ){
									$selected = arrays::in_array( $post->ID, $this->VALUE()->get() );
									?>
									<option <?=$selected ? 'selected' : ''?> value="<?= $post->ID ?>"><?=$post->post_title?></option>
									<?php
								}
								if( count( $posts_by_type ) > 1 ){
									?>
									</optgroup>
									<?php
								}
							}
						?>
					</select>
				</div>
				<?php
				return ob_get_clean();
			}


		}
	}